"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
const DOMException_js_1 = __importDefault(require("../exception/DOMException.cjs"));
const PropertySymbol = __importStar(require("../PropertySymbol.cjs"));
/**
 * Custom elements registry.
 */
class CustomElementRegistry {
    constructor() {
        this[_a] = {};
        this[_b] = {};
    }
    /**
     * Defines a custom element class.
     *
     * @param tagName Tag name of element.
     * @param elementClass Element class.
     * @param [options] Options.
     * @param options.extends
     */
    define(tagName, elementClass, options) {
        const upperTagName = tagName.toUpperCase();
        if (!upperTagName.includes('-')) {
            throw new DOMException_js_1.default("Failed to execute 'define' on 'CustomElementRegistry': \"" +
                tagName +
                '" is not a valid custom element name.');
        }
        this[PropertySymbol.registry][upperTagName] = {
            elementClass,
            extends: options && options.extends ? options.extends.toLowerCase() : null
        };
        // ObservedAttributes should only be called once by CustomElementRegistry (see #117)
        if (elementClass.prototype.attributeChangedCallback) {
            elementClass[PropertySymbol.observedAttributes] = elementClass.observedAttributes;
        }
        if (this[PropertySymbol.callbacks][upperTagName]) {
            const callbacks = this[PropertySymbol.callbacks][upperTagName];
            delete this[PropertySymbol.callbacks][upperTagName];
            for (const callback of callbacks) {
                callback();
            }
        }
    }
    /**
     * Returns a defined element class.
     *
     * @param tagName Tag name of element.
     * @param HTMLElement Class defined.
     */
    get(tagName) {
        const upperTagName = tagName.toUpperCase();
        return this[PropertySymbol.registry][upperTagName]
            ? this[PropertySymbol.registry][upperTagName].elementClass
            : undefined;
    }
    /**
     * Upgrades a custom element directly, even before it is connected to its shadow root.
     *
     * Not implemented yet.
     *
     * @param _root Root node.
     */
    upgrade(_root) {
        // Do nothing
    }
    /**
     * When defined.
     *
     * @param tagName Tag name of element.
     * @returns Promise.
     */
    whenDefined(tagName) {
        const upperTagName = tagName.toUpperCase();
        if (this.get(upperTagName)) {
            return Promise.resolve();
        }
        return new Promise((resolve) => {
            this[PropertySymbol.callbacks][upperTagName] =
                this[PropertySymbol.callbacks][upperTagName] || [];
            this[PropertySymbol.callbacks][upperTagName].push(resolve);
        });
    }
}
_a = PropertySymbol.registry, _b = PropertySymbol.callbacks;
exports.default = CustomElementRegistry;
//# sourceMappingURL=CustomElementRegistry.cjs.map