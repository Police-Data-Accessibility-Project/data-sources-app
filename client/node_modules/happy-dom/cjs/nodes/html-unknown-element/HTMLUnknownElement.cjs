"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _HTMLUnknownElement_customElementDefineCallback;
Object.defineProperty(exports, "__esModule", { value: true });
const HTMLElement_js_1 = __importDefault(require("../html-element/HTMLElement.cjs"));
const PropertySymbol = __importStar(require("../../PropertySymbol.cjs"));
const NodeList_js_1 = __importDefault(require("../node/NodeList.cjs"));
const HTMLCollection_js_1 = __importDefault(require("../element/HTMLCollection.cjs"));
const HTMLElementNamedNodeMap_js_1 = __importDefault(require("../html-element/HTMLElementNamedNodeMap.cjs"));
/**
 * HTML Unknown Element.
 *
 * Reference:
 * https://developer.mozilla.org/en-US/docs/Web/API/HTMLUnknownElement.
 */
class HTMLUnknownElement extends HTMLElement_js_1.default {
    constructor() {
        super(...arguments);
        _HTMLUnknownElement_customElementDefineCallback.set(this, null);
    }
    /**
     * Connects this element to another element.
     *
     * @param parentNode Parent node.
     */
    [(_HTMLUnknownElement_customElementDefineCallback = new WeakMap(), PropertySymbol.connectToNode)](parentNode = null) {
        const tagName = this[PropertySymbol.tagName];
        // This element can potentially be a custom element that has not been defined yet
        // Therefore we need to register a callback for when it is defined in CustomElementRegistry and replace it with the registered element (see #404)
        if (tagName.includes('-') &&
            this[PropertySymbol.ownerDocument][PropertySymbol.ownerWindow].customElements[PropertySymbol.callbacks]) {
            const callbacks = this[PropertySymbol.ownerDocument][PropertySymbol.ownerWindow].customElements[PropertySymbol.callbacks];
            if (parentNode && !__classPrivateFieldGet(this, _HTMLUnknownElement_customElementDefineCallback, "f")) {
                const callback = () => {
                    if (this[PropertySymbol.parentNode]) {
                        const newElement = (this[PropertySymbol.ownerDocument].createElement(tagName));
                        newElement[PropertySymbol.childNodes] =
                            this[PropertySymbol.childNodes];
                        newElement[PropertySymbol.children] =
                            this[PropertySymbol.children];
                        newElement[PropertySymbol.isConnected] = this[PropertySymbol.isConnected];
                        newElement[PropertySymbol.rootNode] = this[PropertySymbol.rootNode];
                        newElement[PropertySymbol.formNode] = this[PropertySymbol.formNode];
                        newElement[PropertySymbol.selectNode] = this[PropertySymbol.selectNode];
                        newElement[PropertySymbol.textAreaNode] = this[PropertySymbol.textAreaNode];
                        newElement[PropertySymbol.observers] = this[PropertySymbol.observers];
                        newElement[PropertySymbol.isValue] = this[PropertySymbol.isValue];
                        for (let i = 0, max = this[PropertySymbol.attributes].length; i < max; i++) {
                            newElement[PropertySymbol.attributes].setNamedItem(this[PropertySymbol.attributes][i]);
                        }
                        this[PropertySymbol.childNodes] = new NodeList_js_1.default();
                        this[PropertySymbol.children] = new HTMLCollection_js_1.default();
                        this[PropertySymbol.rootNode] = null;
                        this[PropertySymbol.formNode] = null;
                        this[PropertySymbol.selectNode] = null;
                        this[PropertySymbol.textAreaNode] = null;
                        this[PropertySymbol.observers] = [];
                        this[PropertySymbol.isValue] = null;
                        this[PropertySymbol.attributes] =
                            new HTMLElementNamedNodeMap_js_1.default(this);
                        for (let i = 0, max = this[PropertySymbol.parentNode][PropertySymbol.childNodes]
                            .length; i < max; i++) {
                            if (this[PropertySymbol.parentNode][PropertySymbol.childNodes][i] ===
                                this) {
                                this[PropertySymbol.parentNode][PropertySymbol.childNodes][i] =
                                    newElement;
                                break;
                            }
                        }
                        if (this[PropertySymbol.parentNode][PropertySymbol.children]) {
                            for (let i = 0, max = this[PropertySymbol.parentNode][PropertySymbol.children]
                                .length; i < max; i++) {
                                if (this[PropertySymbol.parentNode][PropertySymbol.children][i] ===
                                    this) {
                                    this[PropertySymbol.parentNode][PropertySymbol.children][i] =
                                        newElement;
                                    break;
                                }
                            }
                        }
                        if (newElement[PropertySymbol.isConnected] && newElement.connectedCallback) {
                            newElement.connectedCallback();
                        }
                        this[PropertySymbol.connectToNode](null);
                    }
                };
                callbacks[tagName] = callbacks[tagName] || [];
                callbacks[tagName].push(callback);
                __classPrivateFieldSet(this, _HTMLUnknownElement_customElementDefineCallback, callback, "f");
            }
            else if (!parentNode && callbacks[tagName] && __classPrivateFieldGet(this, _HTMLUnknownElement_customElementDefineCallback, "f")) {
                const index = callbacks[tagName].indexOf(__classPrivateFieldGet(this, _HTMLUnknownElement_customElementDefineCallback, "f"));
                if (index !== -1) {
                    callbacks[tagName].splice(index, 1);
                }
                if (!callbacks[tagName].length) {
                    delete callbacks[tagName];
                }
                __classPrivateFieldSet(this, _HTMLUnknownElement_customElementDefineCallback, null, "f");
            }
        }
        super[PropertySymbol.connectToNode](parentNode);
    }
}
exports.default = HTMLUnknownElement;
//# sourceMappingURL=HTMLUnknownElement.cjs.map